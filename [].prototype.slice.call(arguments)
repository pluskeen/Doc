Array.prototype.slice.call(arguments) 是如何工作的？

.call 或这 .apply 的作用是改变函数执行的作用域
例如有 fn 函数和对象 o
fn.call(o) 将函数 fn 的执行作用域变为对像 o ，此时 fn 里的 this 就是 o 

.slice 函数的作用
接受两个（可选）参数，将返回一个从开始到结束（不包括结束）位置的数组的一部分浅拷贝到一个新数组中，原数组不变
注意点：不包括结束位置的值，浅拷贝到新数组
var r = [1,2,3,4,5,6,7,8,9,0]
r.slice(4,-3) // [5,6,7]
r.slice(4,-8) // []
r.slice(3) // [4,5,6,7,8,9,0]
r.slice(-2) // [9,0]
r.slice(-2,-1) // [9]
r.slice(-4,6) // []
r.slice(-4,1) // []
r.slice(-4,8) // [7,8]
r.slice() // [1,2,3,4,5,6,7,8,9,0]

arguments 是一个类数组对象，可以使用方括号的方法访问里面的每一个元素，但它并不是 Array 的实例，它保存着函数的所有参数，可以使用 length 属性获得参数个数

this 对象是在运行时确定的，当某个函数在全局作用域执行时，函数里的 this 就是 window ，当函数作为某个对象的方法调用时，函数里的 this 就等于那个对象

根据上面的知识点分析一下
正常调用 slice 时， slice 函数里的 this 就是调用它数组
call 函数可以修改 slice 函数中 this 对象，让 this 等于 arguments 
slice 函数没有任何参数的情况，返回一个数组浅拷贝的新数组