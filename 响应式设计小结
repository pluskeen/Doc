做移动端web开发，总是要面对各种坑


/*********/
前置知识
/*********/

viewport 视口
视口是指浏览器窗口内展示内容的区域，不包括工具栏和状态栏

在移动端有两个不同的视口概念
布局视口：浏览器厂商设置的默认视口，浏览器厂商在设计的时候为了让普通页面能在移动端上良好展示，所以设计得比视觉视口大
视觉视口：移动设备展示页面的视口
需要将布局视口等于视觉视口，来实现移动端布局

物理像素
又称设备像素，是设备上最微小的物理元件

设备独立像素
可以认为是计算机坐标系统中的一个点，可以让程序使用的虚拟像素，然后由相关系统转换为物理像素

css像素
一个抽象单位，主要使用在浏览器上，用来精确度量web页面上的内容，一般情况下又称css像素为设备无关像素（DIPs）

屏幕密度
代表设备表面上存在的像素密度，通常表示每英寸有多少像素（PPI）

设备像素比（device-pixel-ratio）
简称 dpr ，定义了物流像素与设备独立像素之间的关系，它的值可以这样计算：设备像素比 = 物理像素 / 设备独立像素
在javascript中可以通过 window.devicePixelRatio 获取到当前设备的 dpr ,css媒体查询 -webkit-device-pixel-ratio（仅列出了webkit内核浏览器） 判断设备的 dpr 

与视口相关的 meta 标签
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no,maximum-scale=1">
主要用来告诉浏览器如何渲染页面，我们需要告诉浏览器视口的宽度
上面代码就告诉浏览器布局视口等于视觉视口

css单位rem
rem是相对根元素<HTML>的字体大小来计算的
<html style="font-size="16px";"></html> ，此时 1rem = 16px



/*********/
项目应用
/*********/
采用手淘移动端适配方案
https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html

该方案核心目的
动态改写 <meta> 标签
给 <html> 元素添加 data-dpr 属性，并且动态改写 data-dpr 的值
给 <html> 元素添加 font-size 属性，并且动态改写 font-size 的值

结合实际项目改写部分代码
实际项目中没有用到 css 预处理器
项目前后端耦合，采用的 idea 或 eclipse 编辑器，暂不知道是否有类似 px2rem 的插件
设计稿采用的是 750 宽度的视觉稿，手淘方案中 iphone6 的 1rem = 75px ，不方便单位换算
为了开发效率，做了一下改进，思路如下
目标是为了能将设计稿量出来的尺寸直接除 100 得到正确的 rem ，即假设 1rem = 100px
根据设计稿可以看出，布局视口最大宽度是 750 / 100 = 7.5rem
假设现有宽度 150px 的盒子需要换算，设计稿的宽度是实际屏幕的 2 倍，实际此盒子占屏幕宽度 150 / 2 = 75px
又假设当前计算出来的 <html> 元素的字体大小是 100px ，得出的宽度就是 width = 0.75rem ，不是预设目标，中间做了除 2 的运算
0.75rem 乘 2 刚好是我们想要结果 1.5rem ，根据如下计算步骤 75 / 100 * 2 = 1.5rem ，约分得出 75 / 50 = 1.5rem
所以如果此时的 <html> 元素的字体大小是 50px ，正好满足目标
需要根据设备的宽度动态计算 <html> 元素的字体大小
在iphone6中设备的宽度是 375 ，而 设备宽度与理想中 <html> 元素的字体大小比值，正好等于 7.5rem ，即 375 / 50 === 750 / 100
由此可以得出计算 <html> 元素的字体大小的公式 font-size = 设备宽度 / ( 设计稿宽度 / 100 )
这样不论设计稿宽度是多少，都能将量出的尺寸除 100 得到正确的 rem
项目中 meta 标签采用固定值，未动态计算 initial-scale 值

1px边框问题
手淘适配方案中根据屏幕的 dpr 动态设置了 initial-scale ，1px 边框因为缩放可以正确显示
项目中设置了固定的缩放值，1px 的线条会较粗
定义了关于边框的公共样式，部分如下
.border-1px{
  position:relative;
  width:100%;
}
.border-1px:after{
  content:'';
  position:absolute;
  width:100%;
  border-bottom:1px solid #333;
  left:0;
  bottom:0;
  transform:scaleY(.5);
}

图片高清化
根据 dpr 的值来动态修改图片加载路径
或者将设备的 dpr 值返回给后台，由后台处理返回图片的路径
需要注意的是使用 img 标签时，设置好 width 和 height 属性，减少页面布局在更改图片时性能消耗

背景图高清化
使用媒体查询为不同 dpr 设备加载不同背景图，部分代码如下
@media only screen and (-Webkit-min-device-pixel-ratio: 1.5),
only screen and (-moz-min-device-pixel-ratio: 1.5),
only screen and (-o-min-device-pixel-ratio: 3/2),
only screen and (min-device-pixel-ratio: 1.5) {
  .icon {
    background-image: url(example@2x.png);
  }
}

响应式图片
** 使用 max-width : 100% ，可以根据容器的大小缩放或者放大图像，并且图像的宽高比保持不变。
视频和其他富媒体上也可以使用
img, embed, object, video { max-width: 100%; }
在一些浏览器中仅指定图片的宽度，可能会导致浏览器重新处理布局，调整页面的时间周期会增加两到三倍
虽然周期不到一毫秒，但是累积起来，尤其是页面上有很多个这样的元素的时候，还是或多或少会影响页面的性能。为了解决这个问题，可以显式的指定图片的height值为auto
** 配合 background-image 和 background-size 一起使用
固定纵横比例
为了保持背景图片的纵横比例，需要基于宽度来计算 padding-top 或者 padding-bottom 的值
padding-top / padding-bottom = （背景图片高度 / 背景图片宽度） * 100%
自适应纵横比例
同一张图片根据设备不同（或者布局不同）显示不同的比例
需要知道各种比例的宽高
假设我们的大图尺寸是700像素宽度和267像素高，而我们决定显示的图片尺寸是在300像素宽度和167像素的高度。现在我们需要计算高度 height 和内距 padding-top 或 padding-bottom 的值
计算坡度，也就是 padding-top / padding-bottom ，也就是自适应那部分的高度 s = (h2 - h1) / (w2 - w1)
计算固定的开始高度 h = h1 - s * w1
